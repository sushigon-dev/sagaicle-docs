openapi: "3.0.3"
info:
  title: Sushigon API
  version: "1.0.0"
  description: API specification for the Sushigon project.
servers:
  - url: http://localhost:8080
  - url: https://x162-43-27-150.static.xvps.ne.jp
  - url: http://x162-43-27-150.static.xvps.ne.jp
paths:
  /api/tags:
    $ref: "./paths/tags.yaml"
  /api/search:
    $ref: "./paths/routes.yaml#/paths/~1api~1search"
  /api/routes:
    $ref: "./paths/routes.yaml#/paths/~1api~1routes"
  /api/routes/{route_id}:
    $ref: "./paths/routes.yaml#/paths/~1api~1routes~1{route_id}"
  /api/routes/{route_id}/like:
    $ref: "./paths/likes.yaml"
  /api/routes/{route_id}/checkpoints:
    $ref: "./paths/checkpoints.yaml#/paths/~1api~1routes~1{route_id}~1checkpoints"
  /api/routes/{route_id}/checkpoints/{checkpoint_index}/visit:
    $ref: "./paths/checkpoints.yaml#/paths/~1api~1routes~1{route_id}~1checkpoints~1{checkpoint_index}~1visit"
  /api/user:
    $ref: "./paths/user.yaml"
  /api/auth/register:
    $ref: "./paths/auth.yaml#/paths/~1api~1auth~1register"
  /api/auth/login:
    $ref: "./paths/auth.yaml#/paths/~1api~1auth~1login"
  /api/auth/logout:
    $ref: "./paths/auth.yaml#/paths/~1api~1auth~1logout"
  /api/auth/me:
    $ref: "./paths/auth.yaml#/paths/~1api~1auth~1me"
components:
  schemas:
    UUID:
      type: string
      format: uuid

    RangeFloat:
      type: object
      properties:
        min:
          type: number
          format: double
          minimum: 0.0
          default: 0.0
        max:
          type: number
          format: double
          minimum: 0.0
          default: 0.0
          example: 2.4

    RangeInt:
      type: object
      properties:
        min:
          type: integer
          minimum: 0
          default: 0
        max:
          type: integer
          minimum: 0
          default: 0
          example: 5

    Sort:
      type: object
      properties:
        key:
          type: string
          enum: ["distance", "time", "likes", "update_at"]
          default: "likes"
        order:
          type: string
          enum: ["asc", "desc"]
          default: "asc"

    TagArray:
      type: array
      items:
        type: string
        minLength: 1
        maxLength: 10
      minItems: 0
      maxItems: 20
      example: ["絶景", "山道"]

    SearchOption:
      type: array
      items:
        type: string
        enum: ["AND", "OR", "NOT"]
      default: ["OR"]

    Limit:
      type: integer
      minimum: 1
      maximum: 60
      default: 12

    RouteSummary:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/UUID"
        title:
          type: string
          example: "まじで楽しいサイクリング"
        description:
          type: string
          example: "未知なる、でこぼこ道を走る。きっと楽しい。"
        distance:
          type: number
          format: double
          example: 92.5
        time:
          type: integer
          example: 120
        tags:
          $ref: "#/components/schemas/TagArray"
        likes:
          type: integer
          example: 2
        image:
          type: string
          format: uri
          example: "https://sushigon-dev.github.io/sagaicle-docs/images/%E3%83%8F%E3%83%83%E3%82%AB%E3%82%BD%E3%83%B3_%E7%94%BB%E5%83%8F1.jpg"
        update_at:
          type: string
          pattern: "^\\d{4}/\\d{2}/\\d{2}$"
          example: "2024/04/21"

    Checkpoint:
      type: object
      properties:
        name:
          type: string
          example: "なんとか市場"
        lat:
          type: number
          format: double
          example: 22.5
        lng:
          type: number
          format: double
          example: 125.789

    BadgedRoute:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/RouteSummary/properties/id"
        title:
          $ref: "#/components/schemas/RouteSummary/properties/title"

    LikedRoute:
      type: object
      properties:
        id:
          $ref: "#/components/schemas/RouteSummary/properties/id"
        title:
          $ref: "#/components/schemas/RouteSummary/properties/title"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
