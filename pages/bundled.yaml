openapi: 3.0.3
info:
  title: Sushigon API
  version: 1.0.0
  description: API specification for the Sushigon project.
servers:
  - url: 'http://localhost:8080'
paths:
  /api/tags:
    get:
      summary: 検索可能なタグの取得 (GetTags)
      operationId: GetTags
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  tags:
                    $ref: '#/components/schemas/TagArray'
                  error:
                    type: string
                    example: ''
        '500':
          description: サーバー内エラー
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
  /api/search:
    post:
      summary: ルート一覧検索（取得） (SearchRoutes)
      operationId: SearchRoutes
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                distance:
                  $ref: '#/components/schemas/RangeFloat'
                time:
                  $ref: '#/components/schemas/RangeInt'
                tags:
                  $ref: '#/components/schemas/TagArray'
                search_option:
                  $ref: '#/components/schemas/SearchOption'
                sort:
                  $ref: '#/components/schemas/Sort'
                limit:
                  $ref: '#/components/schemas/Limit'
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  hit_count:
                    type: integer
                  routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/RouteSummary'
                  distance:
                    $ref: '#/components/schemas/RangeFloat'
                  time:
                    $ref: '#/components/schemas/RangeInt'
                  tags:
                    $ref: '#/components/schemas/TagArray'
                  search_option:
                    $ref: '#/components/schemas/SearchOption'
                  sort:
                    $ref: '#/components/schemas/Sort'
                  limit:
                    $ref: '#/components/schemas/Limit'
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '500':
          description: サーバー内エラー
  /api/routes:
    post:
      summary: ルート詳細情報の作成 (PostRoute)
      operationId: PostRoute
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      responses:
        '201':
          description: 作成成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Route'
                  - type: object
                    properties:
                      route_id:
                        $ref: '#/components/schemas/UUID'
                      update_at:
                        type: string
                        pattern: '^\d{4}/\d{2}/\d{2}$'
                        example: 2024/04/21
                      error:
                        type: string
                        example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '500':
          description: サーバー内エラー
  '/api/routes/{route_id}':
    get:
      summary: ルート詳細情報の取得 (GetRoute)
      operationId: GetRoute
      parameters:
        - name: route_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    $ref: '#/components/schemas/UUID'
                  update_at:
                    type: string
                    pattern: '^\d{4}/\d{2}/\d{2}$'
                    example: 2024/04/21
                    $ref: '#/components/schemas/Route'
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '404':
          description: リソースが存在しない
        '500':
          description: サーバー内エラー
  '/api/routes/{route_id}/like':
    get:
      summary: ルートがいいね済みか判定 (IsLiked)
      operationId: IsLiked
      security:
        - bearerAuth: []
      parameters:
        - name: route_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    $ref: '#/components/schemas/UUID'
                  is_liked:
                    type: boolean
                    example: true
                  likes:
                    type: integer
                    example: 324
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '404':
          description: リソースが存在しない
        '500':
          description: サーバー内エラー
    post:
      summary: いいね追加 (Like)
      operationId: Like
      security:
        - bearerAuth: []
      parameters:
        - name: route_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    $ref: '#/components/schemas/UUID'
                  likes:
                    type: integer
                    example: 324
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '404':
          description: リソースが存在しない
        '500':
          description: サーバー内エラー
    delete:
      summary: いいね削除 (Dislike)
      operationId: Dislike
      security:
        - bearerAuth: []
      parameters:
        - name: route_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    $ref: '#/components/schemas/UUID'
                  likes:
                    type: integer
                    example: 323
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '404':
          description: リクエストが存在しない
        '500':
          description: サーバー内エラー
  '/api/routes/{route_id}/checkpoints':
    get:
      summary: どのチェックポイントに訪れているか (GetVisitedCheckpoints)
      operationId: GetVisitedCheckpoints
      security:
        - bearerAuth: []
      parameters:
        - name: route_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    $ref: '#/components/schemas/UUID'
                  visited_checkpoints:
                    type: array
                    items:
                      type: boolean
                    example:
                      - true
                      - false
                      - false
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '404':
          description: リソースが存在しない
        '500':
          description: サーバー内エラー
  '/api/routes/{route_id}/checkpoints/{checkpoint_index}/visit':
    post:
      summary: チェックポイントに訪れる (VisitCheckpoints)
      operationId: VisitCheckpoints
      security:
        - bearerAuth: []
      parameters:
        - name: route_id
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/UUID'
        - name: checkpoint_index
          in: path
          required: true
          schema:
            type: integer
            minimum: 0
            example: 1
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  route_id:
                    $ref: '#/components/schemas/UUID'
                  visited_checkpoints:
                    type: array
                    items:
                      type: boolean
                    example:
                      - true
                      - false
                      - false
                  total_checkpoints:
                    type: integer
                    example: 3
                  checkpoint_index:
                    type: integer
                    example: 1
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '404':
          description: リソースが存在しない
        '500':
          description: サーバー内エラー
  /api/user:
    get:
      summary: ユーザープロフィール取得 (GetProfile)
      operationId: GetProfile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Authorization:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_name:
                    type: string
                    example: 車輪男爵
                  badged_routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/BadgedRoute'
                  liked_routes:
                    type: array
                    items:
                      $ref: '#/components/schemas/LikedRoute'
                  mileage:
                    type: number
                    format: double
                    example: 203.36
                  total_distance:
                    type: number
                    format: double
                    example: 35445.124
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '404':
          description: ユーザーが存在しない
        '500':
          description: サーバー内エラー
  /api/auth/register:
    post:
      summary: ユーザ登録（サインアップ） (Register)
      operationId: Register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  minLength: 1
                  maxLength: 32
                  example: 車輪男爵
                password:
                  type: string
                  minLength: 1
                  maxLength: 32
                  example: pAsMK$5^d*S27Z*oD
      responses:
        '201':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_name:
                    type: string
                    example: 車輪男爵
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '409':
          description: 一意の値が衝突
        '500':
          description: サーバー内エラー
  /api/auth/login:
    post:
      summary: ログイン (Login)
      operationId: Login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_name:
                  type: string
                  minLength: 1
                  maxLength: 32
                  example: 車輪男爵
                password:
                  type: string
                  minLength: 1
                  maxLength: 32
                  example: pAsMK$5^d*S27Z*oD
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
            Set-Cookie:
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_name:
                    type: string
                    example: 車輪男爵
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '500':
          description: サーバー内エラー
  /api/auth/logout:
    delete:
      summary: ログアウト（トークンの revoke） (Logout)
      operationId: Logout
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.PcmVIPbcZl9j7qFzXRAeSyhtuBnHQNMuLHsaG5l804A
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '500':
          description: サーバー内エラー
  /api/auth/me:
    get:
      summary: ユーザー自身の認証情報取得 (Whoami)
      operationId: Whoami
      security:
        - bearerAuth: []
      responses:
        '200':
          description: 成功
          headers:
            Content-Type:
              schema:
                type: string
                example: application/json
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    $ref: '#/components/schemas/UUID'
                  user_name:
                    type: string
                    example: 車輪男爵
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.PcmVIPbcZl9j7qFzXRAeSyhtuBnHQNMuLHsaG5l804A
                  error:
                    type: string
                    example: ''
        '400':
          description: 不正なリクエスト
        '401':
          description: 未認証
        '500':
          description: サーバー内エラー
components:
  schemas:
    UUID:
      type: string
      format: uuid
    RangeFloat:
      type: object
      properties:
        min:
          type: number
          format: double
          minimum: 0
          default: 0
        max:
          type: number
          format: double
          minimum: 0
          default: 0
          example: 2.4
    RangeInt:
      type: object
      properties:
        min:
          type: integer
          minimum: 0
          default: 0
        max:
          type: integer
          minimum: 0
          default: 0
          example: 5
    Sort:
      type: object
      properties:
        key:
          type: string
          enum:
            - distance
            - time
            - likes
            - update_at
          default: likes
        order:
          type: string
          enum:
            - asc
            - desc
          default: asc
    TagArray:
      type: array
      items:
        type: string
        minLength: 1
        maxLength: 10
      minItems: 0
      maxItems: 20
      example:
        - 絶景
        - 山道
    SearchOption:
      type: array
      items:
        type: string
        enum:
          - AND
          - OR
          - NOT
      default:
        - OR
    Limit:
      type: integer
      minimum: 1
      maximum: 60
      default: 12
    Route:
      type: object
      properties:
        route_id:
          $ref: '#/components/schemas/UUID'
        title:
          type: string
          minLength: 1
          maxLength: 20
          example: まじで楽しいサイクリング
        description:
          type: string
          minLength: 1
          maxLength: 60
          example: 未知なる、でこぼこ道を走る。きっと楽しい。
        full_description:
          type: string
          minLength: 1
          maxLength: 200
          example: これがコースの説明ってやつか！！よくわからんが楽しいサイクリングコースに違いない！きっとそうだ！
        distance:
          type: number
          format: double
          minimum: 0
          example: 92.5
        time:
          type: integer
          minimum: 0
          example: 120
        tags:
          $ref: '#/components/schemas/TagArray'
        total_checkpoints:
          type: integer
          minimum: 1
          maximum: 20
        images:
          type: array
          items:
            type: string
            format: uri
            minLength: 8
            maxLength: 1023
            example: 'https://sushigon-dev.github.io/sagaicle-docs/images/%E3%83%8F%E3%83%83%E3%82%AB%E3%82%BD%E3%83%B3_%E7%94%BB%E5%83%8F1.jpg'
          minItems: 1
          maxItems: 6
        map:
          type: string
          format: uri
          minLength: 8
          maxLength: 1023
          example: 'https://www.google.com/maps/embed?pb=!1m34!1m12!1m3!1d53232.399525649176!2d129.8789995119896!3d33.500727456251056!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!4m19!3e2!4m5!1s0x356a70cc3232808d%3A0xd7a502b62a6d0a29!2z44CSODQ3LTAzMDMg5L2Q6LOA55yM5ZSQ5rSl5biC5ZG85a2Q55S65ZG85a2Q77yU77yR77yX77yXIOWRvOWtkOacneW4gg!3m2!1d33.5370608!2d129.8950614!4m5!1s0x356a7044e79d3495%3A0x882258dc0768a665!2z5rOi5oi45bKs44CB44CSODQ3LTA0MDQg5L2Q6LOA55yM5ZSQ5rSl5biC6Y6u6KW_55S65rOi5oi477yZ77yU77yX!3m2!1d33.5555046!2d129.8463836!4m5!1s0x3541d7c5afdabd47%3A0x5c7bb964cbf3f085!2z6Jm544Gu5p2-5Y6f44CB44CSODQ3LTAwMjIg5L2Q6LOA55yM5ZSQ5rSl5biC6Y-h!3m2!1d33.4460754!2d129.99401459999999!5e0!3m2!1sja!2sjp!4v1740241824233!5m2!1sja!2sjp'
        update_at:
          type: string
          pattern: '^\d{4}/\d{2}/\d{2}$'
          example: 2024/04/21
        checkpoints:
          type: array
          items:
            $ref: '#/components/schemas/Checkpoint'
          example:
            - name: なんとか市場
              lat: 22.5
              lng: 125.789
            - name: なんとか山
              lat: 23
              lng: 125.812
            - name: なんとか神社
              lat: 23.2
              lng: 125.712
    RouteSummary:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        title:
          $ref: '#/components/schemas/Route/properties/title'
        description:
          $ref: '#/components/schemas/Route/properties/description'
        distance:
          $ref: '#/components/schemas/Route/properties/distance'
        time:
          $ref: '#/components/schemas/Route/properties/time'
        tags:
          $ref: '#/components/schemas/TagArray'
        likes:
          type: integer
          example: 2
        image:
          $ref: '#/components/schemas/Route/properties/images/items'
        update_at:
          $ref: '#/components/schemas/Route/properties/update_at'
    Checkpoint:
      type: object
      properties:
        name:
          type: string
          example: なんとか市場
        lat:
          type: number
          format: double
          example: 22.5
        lng:
          type: number
          format: double
          example: 125.789
    BadgedRoute:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        title:
          $ref: '#/components/schemas/Route/properties/title'
    LikedRoute:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/UUID'
        title:
          $ref: '#/components/schemas/Route/properties/title'
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
